import React, { createContext, useContext, useEffect, useState } from "react";nimport { ID, Models } from "react-native-appwrite";nimport { account } from "./appwrite";nntype AuthContextType = {n    user: Models.User<Models.Preferences> | null;n    isLoadingUser: boolean;n    signUp: (email: string, password: string) => Promise<string | null>;n    signIn: (email: string, password: string) => Promise<string | null>;n    signOut: () => Promise<void>;n    //logout: () => void;n}nnconst AuthContext = createContext<AuthContextType | undefined>(undefined);nnexport function AuthProvider({children}: {children: React.ReactNode}){nn    const [user, setUser] = useState<Models.User<Models.Preferences> | null>(null);n    const [isLoadingUser, setIsLoadingUser] = useState<boolean>(true);nn    useEffect(() => {n        getUser();n    }, []);nnn    const getUser = async () => {n        try{n            const session = await account.get();n            setUser(session);n        }catch(error){n            setUser(null);n        }finally{n            setIsLoadingUser(false);n        }n    }n    n    const signUp = async (email: string, password: string) => {n        try{ n            await account.create(ID.unique(), email, password);n            await signIn(email, password);n            return null;n        }catch(error){n            if (error instanceof Error){n                return error.message;n            }n            return "An error occurred during sign up.";n        }n    };nn    const signIn = async (email: string, password: string) => {n        try{ n            await account.createEmailPasswordSession(email, password);n            const session = await account.get();n            setUser(session);n            return null;n        }catch(error){n            if (error instanceof Error){n                return error.message;n            }n            return "An error occurred during sign in.";n        }n    };n    n    const logout = () => {n        // TODO: Implement logout functionalityn    };nn    const signOut = async () => {n        try{n            await account.deleteSession("current");n            setUser(null);n        }catch(error){n            console.log(error);n        }n    };n    n    return(n    <AuthContext.Provider value={{user, isLoadingUser, signUp, signIn, signOut}}>n        {children}n    </AuthContext.Provider>n    );n}nnexport function useAuth(){n    const context = useContext(AuthContext);n    if (context === undefined){n        throw new Error("useAuth must be used within an AuthProvider");n    }n    return context;n}