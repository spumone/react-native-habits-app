import { client, COMPLETIONS_COLLECTION_ID, DATABASE_ID, databases, HABITS_COLLECTION_ID, RealtimeResponse } from "@/lib/appwrite";nimport { useAuth } from "@/lib/auth-context";nimport { Habit, HabitCompletion } from "@/types/database.type";nimport { MaterialCommunityIcons } from "@expo/vector-icons";nimport { useEffect, useRef, useState } from "react";nimport { ScrollView, StyleSheet, View } from "react-native";nimport { ID, Query } from "react-native-appwrite";nimport { Swipeable } from "react-native-gesture-handler";nimport { Button, Surface, Text } from "react-native-paper";nnnexport default function Index() {n  const {signOut, user} = useAuth();n  const [habits, setHabits] = useState<Habit[]>();n  const swipeableRef = useRef<{[key: string]:Swipeable | null}>({});n  const [completedHabits, setCompletedHabits] = useState<String[]>();n  n  useEffect(() => {n    if(user){n    const habitsChannel  = `databases.${DATABASE_ID}.collections.${HABITS_COLLECTION_ID}.documents`;n    const completionsChannel = `databases.${DATABASE_ID}.collections.${COMPLETIONS_COLLECTION_ID}.documents`;n    const habitsSubscription = client.subscribe(habitsChannel, (response: RealtimeResponse) => {n        // Handle subscription responsen        if (response.events.includes("databases.*.collections.*.documents.*.create")) {n          fetchHabits();n        }else if (response.events.includes("databases.*.collections.*.documents.*.update")) {n          fetchHabits();n        }else if (response.events.includes("databases.*.collections.*.documents.*.delete")) {n          fetchHabits();n          fethTodayCompletions();n        }n      }n    );nn    const completionsSubscription = client.subscribe(completionsChannel, (response: RealtimeResponse) => {n      // Handle subscription responsen      if (response.events.includes("databases.*.collections.*.documents.*.create")) {n        console.log("Completion created");n        fethTodayCompletions();n      }n    }n  );n    n    fetchHabits();n    n    return () => {n      habitsSubscription();n      completionsSubscription();n    };n  }n  }, [user]);nnconst fetchHabits = async () => {n  try{n    const response = await databases.listDocuments(n      DATABASE_ID,n      HABITS_COLLECTION_ID,n      [n        Query.equal("user_id", user?.$id ?? "")]n    );n    console.log(response.documents);n    setHabits(response.documents as unknown as Habit[]);n  }catch(error){n    console.error(error)n  }n};nnconst fethTodayCompletions = async () => {n  const today = new Date()n  today.setHours(0,0,0,0);n  try{n    const response = await databases.listDocuments(n      DATABASE_ID,n      COMPLETIONS_COLLECTION_ID,n      [n        Query.equal("user_id", user?.$id ?? ""),n        Query.greaterThanEqual("completed_at", today.toISOString())n      ]n    );nn    const completions = response.documents as unknown as HabitCompletion[];n    n    console.log(response.documents);n    setCompletedHabits(completions.map(c=>c.habit_id));n  }catch(error){n    console.error(error)n  }n};nnconst renderLeftActions = () => (n  <View style={styles.swipeActionLeft}>n    <MaterialCommunityIcons name="trash-can-outline" size={32} color="#fff" />n  </View>n)nnnnconst renderRightActions = (habitId: string) => (n  <View style={styles.swipeActionRight}>n    {isHabitCompleted(habitId) n    ? (n      <Text n        style={{color: "#fff"}}>n          Completedn      </Text>n    ) n    : (n      <MaterialCommunityIcons n        name="check-circle-outline" n        size={32} n        color="#fff" />n    )}n  </View>n)nnconst isHabitCompleted = (habitId: string) => {n  return completedHabits?.includes(habitId);n}nnconst handleDeleteHabit = async (id: string) => {n  try{n    await databases.deleteDocument(DATABASE_ID, HABITS_COLLECTION_ID, id);n  }catch (error){n    console.error(error);n  }n}nnconst handleCompleteHabit = async (id: string) => {n  n  if(!user || completedHabits?.includes(id)) return;n  try{n    console.log("Starting habit completion for ID:", id);n    const currentDate = new Date().toISOString();n    n    // Create completion recordn    await databases.createDocument(n      DATABASE_ID, n      COMPLETIONS_COLLECTION_ID, n      ID.unique(),n      {n        habit_id: id,n        user_id: user.$id,n        completed_at: currentDaten      }n    );n    console.log("Completion record created");nn    const habit = habits?.find((h) => h.$id === id);n    if (!habit) {n      console.error("Habit not found with ID:", id);n      return;n    }n    n    console.log("Current habit:", habit);n    console.log("Current streak_count:", habit.streak_count);n    console.log("New streak_count will be:", (habit.streak_count || 0) + 1);nn    // Update habit streak with null checkn    try {n      console.log("Attempting to update document with ID:", id);n      console.log("Update data:", {n        streak_count: (habit.streak_count || 0) + 1,n        last_completed: currentDaten      });n      n      await databases.updateDocument(n        DATABASE_ID,n        HABITS_COLLECTION_ID,n        id,n        {n          streak_count: (habit.streak_count || 0) + 1,n          last_completed: currentDaten        }n      );n      console.log("Habit streak updated in database");n    } catch (updateError) {n      console.error("Error details:", JSON.stringify(updateError, null, 2));n      throw updateError;n    }n    n    await fetchHabits();n    console.log("Habits refreshed from database");n    console.log("Habit completed successfully");nn  }catch (error){n    console.error(error);n  }n}nnnnreturn (n    <View style={styles.container}>n      <View style={styles.header}>n        <Text variant="headlineSmall" style={styles.title}>Today's Habits</Text>n        <Buttonn          onPress={() => signOut()}n          mode="text"n          icon="logout"n        >n          Sign Outn        </Button>n      </View>n      <ScrollView showsVerticalScrollIndicator={false}>n        {habits?.length === 0 n        ? (n          <View style={styles.emptyState}>n            <Text style={styles.emptyStateText}>No habits yet. Add your first habit!</Text>n          </View>) n        : (habits?.map((habit, key) => (n          <Swipeable ref={(ref) => {n            swipeableRef.current[habit.$id] = ref;n          }} key={key} n          overshootLeft={false} n          overshootRight={false}n          renderLeftActions={renderLeftActions}n          renderRightActions={() => renderRightActions(habit.$id)}n          onSwipeableOpen={(direction) => {n            if(direction === "left"){n              handleDeleteHabit(habit.$id);n            }else if(direction === "right"){n              handleCompleteHabit(habit.$id);n            }n            swipeableRef.current[habit.$id]?.close();n          }}n          >n            <Surface style={[styles.card, isHabitCompleted(habit.$id) ? styles.cardCompleted : {}]}>n              <View style={styles.cardContent}>n                <Text style={styles.cardTitle}>{habit.title}</Text>n                <Text style={styles.cardDescription}>{habit.description}</Text>n                <View style={styles.cardFooter}>n                    <View style={styles.streakBadge}>n                      {/* {" "} */}n                      <MaterialCommunityIcons name="fire" size={18} color={"#ff9800"} />n                      <Text style={styles.streakText}>{habit.streak_count} day streak</Text>n                    </View>n                    <View style={styles.frequencyBadge}>n                      <Text style={styles.frequencyText}>{habit.frequency.charAt(0).toUpperCase() + habit.frequency.slice(1)}</Text>n                    </View>n                </View>n              </View>n            </Surface>n          </Swipeable>n        )))}n      </ScrollView>n    </View>n  );n}nnconst styles = StyleSheet.create({n  view: {n    flex: 1,n    justifyContent: "center",n    alignItems: "center",n    //backgroundColor: "lightblue",n    fontSize: 20,n    fontWeight: "bold",n    color: "black",n    padding: 10,n    borderRadius: 10,n    marginTop: 10,n    marginBottom: 0,n    marginLeft: 10,n    marginRight: 10n  },n  navbutton:{n    width: 100,n    justifyContent: "center",n    alignItems: "center",n    color: "blue",n    textAlign: "center",n    backgroundColor: "coral",n    padding: 10,n    borderRadius: 10,n    marginTop: 10n  },n  container: {n    flex: 1,n    padding: 16,n    backgroundColor: "#f5f5f5"n  },n  header: {n    flexDirection: "row",n    justifyContent: "space-between",n    alignItems: "center",n    marginBottom: 24n  },n  title: {n    fontWeight: "bold"n  },n  emptyState: {n    flex: 1,n    justifyContent: "center",n    alignItems: "center",n    padding: 20n  },n  emptyStateText: {n    fontSize: 16,n    color: "#666",n    textAlign: "center"n  },n  card: {n    marginBottom: 18,n    borderRadius: 8,n    backgroundColor: "#f7f2fa",n    shadowColor: "#000",n    shadowOffset: {width: 0, height: 2},n    shadowOpacity: 0.08,n    shadowRadius: 8,n    elevation: 4n  },n  cardCompleted: {n    opacity: 0.5n  },n  cardContent: {n    padding: 16n  },n  cardTitle: {n    fontSize: 20,n    fontWeight: "bold",n    marginBottom: 4,n    color: "#22223b"n  },n  cardDescription: {n    fontSize: 15,n    color: "#6c6c80",n    marginBottom: 16n  },n  cardFooter: {n    flexDirection: "row",n    justifyContent: "space-between",n    alignItems: "center"n  },n  streakBadge: {n    flexDirection: "row",n    alignItems: "center",n    backgroundColor: "#fff3e0",n    paddingHorizontal: 10,n    paddingVertical: 4,n    borderRadius: 12n  },n  streakText: {n    fontSize: 14,n    fontWeight: "bold",n    color: "#ff9800",n    marginLeft: 6n  },n  frequencyBadge: {n    backgroundColor: "#ede7f6",n    paddingHorizontal: 12,n    paddingVertical: 4,n    borderRadius: 12n  },n  frequencyText: {n    fontSize: 14,n    fontWeight: "bold",n    color: "#7c4dff"n  },n  swipeActionLeft: {n    backgroundColor: "#ff5252",n    justifyContent: "center",n    alignItems: "flex-start",n    flex: 1,n    borderRadius: 8,n    marginBottom: 18,n    marginTop: 2,n    paddingLeft: 16n  },n  swipeActionRight: {n    backgroundColor: "#4caf50",n    justifyContent: "center",n    alignItems: "flex-end",n    flex: 1,n    borderRadius: 8,n    marginBottom: 18,n    marginTop: 2,n    paddingRight: 16n  }n});