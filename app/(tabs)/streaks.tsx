import { COMPLETIONS_COLLECTION_ID, DATABASE_ID, databases, HABITS_COLLECTION_ID } from "@/lib/appwrite";nimport { useAuth } from "@/lib/auth-context";nimport { Habit, HabitCompletion } from "@/types/database.type";nimport { useEffect, useState } from "react";nimport { Text, View } from "react-native";nimport { Query } from "react-native-appwrite";nn//TODO: LEFT OFF VIDEO AT 3:35:00nnexport default function StreaksScreen() {n  const [habits, setHabits] = useState<Habit[]>();n  const [completedHabits, setCompletedHabits] = useState<HabitCompletion[]>();n  const {signOut, user} = useAuth();nnn  useEffect(() => {n    if(user){n     n    fetchHabits();n    fetchCompletions();n    n  }n  }, [user]);nn  const fetchHabits = async () => {n    try{n      const response = await databases.listDocuments(n        DATABASE_ID,n        HABITS_COLLECTION_ID,n        [n          Query.equal("user_id", user?.$id ?? "")]n      );n      console.log(response.documents);n      setHabits(response.documents as unknown as Habit[]);n    }catch(error){n      console.error(error)n    }n  };n  n  const fetchCompletions = async () => {nn    try{n      const response = await databases.listDocuments(n        DATABASE_ID,n        COMPLETIONS_COLLECTION_ID,n        [n          Query.equal("user_id", user?.$id ?? ""),n        ]n      );n      const completions = response.documents as unknown as HabitCompletion[];n      setCompletedHabits(completions);n    }catch(error){n      console.error(error)n    }n  };nninterface StreakData {n  streak: number;n  bestStreak: number;n  total: number;n}nn  const getStreakData= (habitId: string) : StreakData => {n    const habitCompletions = completedHabits?.filter((c)=>c.habit_id === habitId).sort((a,b)=>new Date(a.completed_at).getTime() - new Date(b.completed_at).getTime());n    n    if(habitCompletions?.length === 0){n       return {streak: 0, bestStreak: 0, total: 0};n  }nn  //build streak datan  let streak = 0;n  let bestStreak = 0;n  let total = habitCompletions?.length ?? 0;nn  let lastDate: Date | null = null;n  let currentStreak = 0;nn  habitCompletions?.forEach((c) => {n    const date = new Date(c.completed_at);n    if(lastDate){n      const diff= (date.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24);n    n      if (diff <= 1.5){n        currentStreak++;n      }else{n        currentStreak = 1;n      }n      if(currentStreak > streak){n        streak = currentStreak;n      }n      lastDate = date;n    }else{n      if (currentStreak > bestStreak){n        bestStreak = currentStreak;n      }n      streak = currentStreak;n      lastDate = date;n    }n    n    n  })nn  return {streak, bestStreak, total};n};nnconst habitStreaks = habits?.map((habit) => {n  const {streak, bestStreak, total} = getStreakData(habit.$id);n  return {habit, streak, bestStreak, total};n});nnnnconst rankedHabits = habitStreaks?.sort((a,b)=>b.bestStreak - a.bestStreak);nconsole.log("Ranked Habbits: ",rankedHabits?.map((h)=>h.habit.title));n  n  n  return (n    <View>n      <Text>Habit Streaks</Text>nn    </View>n  );n}